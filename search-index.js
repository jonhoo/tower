var N = null;var searchIndex = {};
searchIndex["tower_balance"]={"doc":"","items":[[3,"Balance","tower_balance","Balances requests across a set of inner services.",N,N],[3,"ResponseFuture","","",N,N],[4,"Error","","Error produced by `Balance`",N,N],[13,"Inner","","",0,N],[13,"Balance","","",0,N],[13,"NotReady","","",0,N],[0,"choose","","",N,N],[3,"PowerOfTwoChoices","tower_balance::choose","Chooses nodes using the [Power of Two Choices][p2c].",N,N],[3,"RoundRobin","","Chooses nodes sequentially.",N,N],[3,"TooFew","","Indicates that there were not at least two services.",N,N],[3,"Replicas","","Holds two or more services.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["self"]]],[11,"new","","",1,[[["smallrng"]],["self"]]],[11,"choose","","Chooses two distinct nodes at random and compares their load.",1,[[["self"],["replicas"]],["usize"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"default","","",2,[[],["roundrobin"]]],[11,"choose","","",2,[[["self"],["replicas"]],["usize"]]],[8,"Choose","","A strategy for choosing nodes.",N,N],[10,"choose","","Returns the index of a replica to be used next.",3,[[["self"],["replicas"]],["usize"]]],[11,"clone","","",4,[[["self"]],["toofew"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"len","","",5,[[["self"]],["usize"]]],[11,"index","","",5,N],[0,"load","tower_balance","",N,N],[3,"InstrumentFuture","tower_balance::load","Attaches a `I`-typed instruments to the result of an `F`-typed `Future`.",N,N],[3,"NoInstrument","","A `Instrument` implementation that drops each instrument immediately.",N,N],[3,"Constant","","Wraps a type so that `Load::load` returns a constant value.",N,N],[11,"clone","","",6,[[["self"]],["noinstrument"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","",7,[[["i"],["h"],["f"]],["self"]]],[11,"poll","","",7,[[["self"]],["poll"]]],[11,"instrument","","",6,[[["self"],["h"],["v"]],["v"]]],[11,"new","","",8,[[["t"],["m"]],["self"]]],[11,"load","","",8,[[["self"]],["m"]]],[11,"poll_ready","","",8,[[["self"]],["poll"]]],[11,"call","","",8,N],[11,"poll","","Yields the next discovery change set.",8,[[["self"]],["poll",["change"]]]],[0,"peak_ewma","","",N,N],[3,"PeakEwma","tower_balance::load::peak_ewma","Wraps an `S`-typed Service with Peak-EWMA load measurement.",N,N],[3,"WithPeakEwma","","Wraps a `D`-typed stream of discovery updates with `PeakEwma`.",N,N],[3,"Cost","","Represents the relative cost of communicating with a service.",N,N],[3,"Handle","","Updates `RttEstimate` when dropped.",N,N],[11,"clone","","",9,[[["self"]],["cost"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["cost"]],["bool"]]],[11,"ne","","",9,[[["self"],["cost"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["cost"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["cost"]],["bool"]]],[11,"le","","",9,[[["self"],["cost"]],["bool"]]],[11,"gt","","",9,[[["self"],["cost"]],["bool"]]],[11,"ge","","",9,[[["self"],["cost"]],["bool"]]],[11,"new","","",10,[[["d"],["duration"],["i"]],["self"]]],[11,"poll","","",10,[[["self"]],["poll",["change"]]]],[11,"poll_ready","","",11,[[["self"]],["poll"]]],[11,"call","","",11,N],[11,"load","","",11,N],[11,"drop","","",12,[[["self"]]]],[0,"pending_requests","tower_balance::load","",N,N],[3,"PendingRequests","tower_balance::load::pending_requests","Expresses load based on the number of currently-pending requests.",N,N],[3,"WithPendingRequests","","Wraps `inner`'s services with `PendingRequests`.",N,N],[3,"Count","","Represents the number of currently-pending requests to a given service.",N,N],[3,"Handle","","",N,N],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["count"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"default","","",15,[[],["count"]]],[11,"partial_cmp","","",15,[[["self"],["count"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["count"]],["bool"]]],[11,"le","","",15,[[["self"],["count"]],["bool"]]],[11,"gt","","",15,[[["self"],["count"]],["bool"]]],[11,"ge","","",15,[[["self"],["count"]],["bool"]]],[11,"eq","","",15,[[["self"],["count"]],["bool"]]],[11,"ne","","",15,[[["self"],["count"]],["bool"]]],[11,"cmp","","",15,[[["self"],["count"]],["ordering"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"load","","",13,[[["self"]],["count"]]],[11,"poll_ready","","",13,[[["self"]],["poll"]]],[11,"call","","",13,N],[11,"new","","",14,[[["d"],["i"]],["self"]]],[11,"poll","","Yields the next discovery change set.",14,[[["self"]],["poll",["change"]]]],[8,"Instrument","tower_balance::load","Attaches `I`-typed instruments to `V` typed values.",N,N],[16,"Output","","",17,N],[10,"instrument","","Attaches an `H`-typed handle to a `V`-typed value.",17,N],[8,"Load","","Exposes a load metric.",N,N],[16,"Metric","","",18,N],[10,"load","","",18,N],[11,"fmt","tower_balance","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"p2c","","Chooses services using the [Power of Two Choices][p2c].",19,[[["d"]],["self"]]],[11,"p2c_with_rng","","Initializes a P2C load balancer from the provided randomization source.",19,[[["d"],["r"]],["result",["error"]]]],[11,"round_robin","","Attempts to choose services sequentially.",19,[[["d"]],["self"]]],[11,"new","","Creates a new balancer.",19,[[["d"],["c"]],["self"]]],[11,"is_ready","","Returns true iff there are ready services.",19,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns true iff there are no ready services.",19,[[["self"]],["bool"]]],[11,"num_ready","","Counts the number of services considered to be ready.",19,[[["self"]],["usize"]]],[11,"num_not_ready","","Counts the number of services not considered to be ready.",19,[[["self"]],["usize"]]],[11,"poll_ready","","Prepares the balancer to process a request.",19,[[["self"]],["poll"]]],[11,"call","","",19,N],[11,"poll","","",20,[[["self"]],["poll"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"into_future","","",20,[[["self"]],["f"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","tower_balance::choose","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","tower_balance::load","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into_future","","",7,[[["self"]],["f"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","tower_balance::load::peak_ewma","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","tower_balance::load::pending_requests","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"equivalent","","",15,[[["self"],["k"]],["bool"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]]],"paths":[[4,"Error"],[3,"PowerOfTwoChoices"],[3,"RoundRobin"],[8,"Choose"],[3,"TooFew"],[3,"Replicas"],[3,"NoInstrument"],[3,"InstrumentFuture"],[3,"Constant"],[3,"Cost"],[3,"WithPeakEwma"],[3,"PeakEwma"],[3,"Handle"],[3,"PendingRequests"],[3,"WithPendingRequests"],[3,"Count"],[3,"Handle"],[8,"Instrument"],[8,"Load"],[3,"Balance"],[3,"ResponseFuture"]]};
searchIndex["tower_buffer"]={"doc":"Buffer requests when the inner service is out of capacity.","items":[[3,"Buffer","tower_buffer","Adds a buffer in front of an inner service.",N,N],[3,"ResponseFuture","","Future eventually completed with the response to the original request.",N,N],[3,"Worker","","Task that handles processing the buffer. This type should not be used directly, instead `Buffer` requires an `Executor` that can accept this task.",N,N],[3,"SpawnError","","Error produced when spawning the worker fails",N,N],[4,"Error","","Errors produced by `Buffer`.",N,N],[13,"Inner","","",0,N],[13,"Closed","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Buffer` wrapping `service`.",2,[[["t"],["e"]],["result",["spawnerror"]]]],[11,"poll_ready","","",2,[[["self"]],["poll"]]],[11,"call","","",2,N],[11,"clone","","",2,[[["self"]],["self"]]],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"poll","","",4,[[["self"]],["poll"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Error"],[3,"SpawnError"],[3,"Buffer"],[3,"ResponseFuture"],[3,"Worker"]]};
searchIndex["tower_discover"]={"doc":"Tower service discovery","items":[[3,"List","tower_discover","Static service discovery based on a predetermined list of services.",N,N],[4,"Change","","A change in the service set",N,N],[13,"Insert","","",0,N],[13,"Remove","","",0,N],[8,"Discover","","Provide a uniform set of services able to satisfy a request.",N,N],[16,"Key","","NewService key",1,N],[16,"Service","","",1,N],[16,"Error","","Error produced during discovery",1,N],[10,"poll","","Yields the next discovery change set.",1,[[["self"]],["poll",["change"]]]],[11,"new","","",2,[[["i"]],["list"]]],[11,"poll","","",2,[[["self"]],["poll",["change"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Change"],[8,"Discover"],[3,"List"]]};
searchIndex["tower_filter"]={"doc":"Conditionally dispatch requests to the inner service based on the result of a predicate.","items":[[3,"Filter","tower_filter","",N,N],[3,"ResponseFuture","","",N,N],[4,"Error","","Errors produced by `Filter`",N,N],[13,"Rejected","","The predicate rejected the request.",0,N],[13,"Inner","","The inner service produced an error.",0,N],[13,"NoCapacity","","The service is out of capacity.",0,N],[8,"Predicate","","Checks a request",N,N],[16,"Error","","",1,N],[16,"Future","","",1,N],[10,"check","","",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",2,[[["t"],["u"],["usize"]],["self"]]],[11,"poll_ready","","",2,[[["self"]],["poll"]]],[11,"call","","",2,N],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Error"],[8,"Predicate"],[3,"Filter"],[3,"ResponseFuture"]]};
searchIndex["tower_in_flight_limit"]={"doc":"Tower middleware that limits the maximum number of in-flight requests for a service.","items":[[3,"InFlightLimit","tower_in_flight_limit","",N,N],[3,"ResponseFuture","","",N,N],[4,"Error","","Error returned when the service has reached its limit.",N,N],[13,"NoCapacity","","",0,N],[13,"Upstream","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["inflightlimit"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new rate limiter",1,[[["t"],["usize"]],["self"]]],[11,"get_ref","","Get a reference to the inner service",1,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the inner service",1,[[["self"]],["t"]]],[11,"into_inner","","Consume `self`, returning the inner service",1,[[["self"]],["t"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N],[11,"poll","","",2,[[["self"]],["poll"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_future","","",2,[[["self"]],["f"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Error"],[3,"InFlightLimit"],[3,"ResponseFuture"]]};
searchIndex["tower_mock"]={"doc":"Mock `Service` that can be used in tests.","items":[[3,"Mock","tower_mock","A mock service",N,N],[3,"Handle","","Handle to the `Mock`.",N,N],[3,"Request","","",N,N],[3,"Respond","","Respond to a request received by `Mock`.",N,N],[3,"ResponseFuture","","Future of the `Mock` response.",N,N],[4,"Error","","Enumeration of errors that can be returned by `Mock`.",N,N],[13,"Closed","","",0,N],[13,"NoCapacity","","",0,N],[13,"Other","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"new","","Create a new `Mock` and `Handle` pair.",1,N],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N],[11,"clone","","",1,[[["self"]],["self"]]],[11,"drop","","",1,[[["self"]]]],[11,"poll_request","","Asynchronously gets the next request",2,[[["self"]],["poll",["option"]]]],[11,"next_request","","Synchronously gets the next request.",2,[[["self"]],["option",["request"]]]],[11,"allow","","Allow a certain number of requests",2,[[["self"],["u64"]]]],[11,"drop","","",2,[[["self"]]]],[11,"into_parts","","Split the request and respond handle",3,N],[11,"respond","","",3,[[["self"],["u"]]]],[11,"error","","",3,[[["self"],["e"]]]],[11,"deref","","",3,[[["self"]],["t"]]],[11,"respond","","",4,[[["self"],["t"]]]],[11,"error","","",4,[[["self"],["e"]]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Error"],[3,"Mock"],[3,"Handle"],[3,"Request"],[3,"Respond"],[3,"ResponseFuture"]]};
searchIndex["tower_rate_limit"]={"doc":"Tower middleware that applies a timeout to requests.","items":[[3,"RateLimit","tower_rate_limit","",N,N],[3,"Rate","","",N,N],[3,"ResponseFuture","","",N,N],[4,"Error","","The request has been rate limited",N,N],[13,"RateLimit","","",0,N],[13,"Upstream","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["rate"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new rate limiter",1,[[["t"],["rate"],["timer"]],["self"]]],[11,"get_ref","","Get a reference to the inner service",1,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the inner service",1,[[["self"]],["t"]]],[11,"into_inner","","Consume `self`, returning the inner service",1,[[["self"]],["t"]]],[11,"new","","Create a new rate",2,[[["u64"],["duration"]],["self"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Error"],[3,"RateLimit"],[3,"Rate"],[3,"ResponseFuture"]]};
searchIndex["tower_reconnect"]={"doc":"","items":[[3,"Reconnect","tower_reconnect","",N,N],[3,"ResponseFuture","","",N,N],[4,"Error","","",N,N],[13,"Inner","","",0,N],[13,"Connect","","",0,N],[13,"NotReady","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",1,[[["t"]],["self"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["self"]],["poll"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_future","","",2,[[["self"]],["f"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Error"],[3,"Reconnect"],[3,"ResponseFuture"]]};
searchIndex["tower_retry"]={"doc":"","items":[[3,"Retry","tower_retry","",N,N],[3,"ResponseFuture","","",N,N],[0,"budget","","",N,N],[3,"Budget","tower_retry::budget","",N,N],[3,"Overdrawn","","",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",1,[[["duration"],["isize"],["f32"]],["self"]]],[11,"deposit","","",1,[[["self"]]]],[11,"withdraw","","",1,[[["self"]],["result",["overdrawn"]]]],[11,"default","","",1,[[],["budget"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[8,"Policy","tower_retry","",N,N],[16,"Future","","",2,N],[10,"retry","","",2,[[["self"],["req"],["result"]],["option"]]],[10,"clone_request","","",2,[[["self"],["req"]],["option"]]],[11,"clone","","",3,[[["self"]],["retry"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","",3,[[["p"],["s"]],["self"]]],[11,"poll_ready","","",3,[[["self"]],["poll"]]],[11,"call","","",3,N],[11,"poll","","",4,[[["self"]],["poll"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"from","tower_retry::budget","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[3,"Overdrawn"],[3,"Budget"],[8,"Policy"],[3,"Retry"],[3,"ResponseFuture"]]};
searchIndex["tower_router"]={"doc":"Routes requests to one of many inner inner services based on the request.","items":[[3,"Router","tower_router","Routes requests to an inner service based on the request.",N,N],[3,"ResponseFuture","","",N,N],[4,"Error","","Error produced by the `Router` service",N,N],[13,"Inner","","Error produced by inner service.",0,N],[13,"Route","","Error produced during route recognition.",0,N],[13,"NotReady","","Request sent when not ready.",0,N],[8,"Recognize","","Matches the request with a route",N,N],[16,"Response","","Inner service's response",1,N],[16,"Error","","Error produced by a failed inner service request",1,N],[16,"RouteError","","Error produced by failed route recognition",1,N],[16,"Service","","The destination service",1,N],[10,"recognize","","Recognize a route",1,[[["self"],["request"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new router",2,[[["t"]],["self"]]],[11,"poll_ready","","",2,[[["self"]],["poll"]]],[11,"call","","",2,N],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Error"],[8,"Recognize"],[3,"Router"],[3,"ResponseFuture"]]};
searchIndex["tower_service"]={"doc":"Definition of the core `Service` trait to Tower","items":[[3,"Ready","tower_service","Future yielding a `Service` once the service is ready to process a request",N,N],[8,"Service","","An asynchronous function from `Request` to a `Response`.",N,N],[16,"Response","","Responses given by the service.",0,N],[16,"Error","","Errors produced by the service.",0,N],[16,"Future","","The future response value.",0,N],[11,"ready","","A future yielding the service when it is ready to accept a request.",0,[[["self"]],["ready"]]],[10,"poll_ready","","Returns `Ready` when the service is able to process requests.",0,[[["self"]],["poll"]]],[10,"call","","Process the request and return the response asynchronously.",0,N],[8,"NewService","","Creates new `Service` values.",N,N],[16,"Response","","Responses given by the service",1,N],[16,"Error","","Errors produced by the service",1,N],[16,"Service","","The `Service` value created by this factory",1,N],[16,"InitError","","Errors produced while building a service.",1,N],[16,"Future","","The future of the `Service` instance.",1,N],[10,"new_service","","Create and return a new service value asynchronously.",1,N],[11,"poll","","",2,[[["self"]],["poll"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_future","","",2,[[["self"]],["f"]]]],"paths":[[8,"Service"],[8,"NewService"],[3,"Ready"]]};
searchIndex["tower_timeout"]={"doc":"Tower middleware that applies a timeout to requests.","items":[[3,"Timeout","tower_timeout","Applies a timeout to requests.",N,N],[3,"ResponseFuture","","`Timeout` response future",N,N],[4,"Error","","Errors produced by `Timeout`.",N,N],[13,"Inner","","The inner service produced an error",0,N],[13,"Timeout","","The request did not complete within the specified timeout.",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","",1,[[["t"],["duration"]],["self"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N],[11,"poll","","",2,[[["self"]],["poll"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_future","","",2,[[["self"]],["f"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Error"],[3,"Timeout"],[3,"ResponseFuture"]]};
searchIndex["tower_util"]={"doc":"Various utility types and functions that are generally with Tower.","items":[[3,"NewServiceFn","tower_util","A `NewService` implemented by a closure.",N,N],[0,"boxed","","Trait object `Service` instances",N,N],[3,"BoxService","tower_util::boxed","A boxed `Service + Send` trait object.",N,N],[3,"UnsyncBoxService","","A boxed `Service` trait object.",N,N],[6,"BoxFuture","","A boxed `Future + Send` trait object.",N,N],[6,"UnsyncBoxFuture","","A boxed `Future` trait object.",N,N],[11,"new","","",0,[[["s"]],["self"]]],[11,"poll_ready","","",0,[[["self"]],["poll"]]],[11,"call","","",0,[[["self"],["t"]],["boxfuture"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",1,[[["s"]],["self"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,[[["self"],["t"]],["unsyncboxfuture"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[0,"either","tower_util","Contains `EitherService` and related types and functions.",N,N],[4,"EitherService","tower_util::either","Combine two different service types into a single type.",N,N],[13,"A","","",2,N],[13,"B","","",2,N],[11,"poll_ready","","",2,[[["self"]],["poll"]]],[11,"call","","",2,N],[0,"ext","tower_util","Combinators for working with `Service`s",N,N],[3,"AndThen","tower_util::ext","Service for the `and_then` combinator, chaining a computation onto the end of another service which completes successfully.",N,N],[3,"Apply","","`Apply` service combinator",N,N],[3,"FromErr","","Service for the `from_err` combinator, changing the error type of a service.",N,N],[3,"Map","","Service for the `map` combinator, changing the type of a service's response.",N,N],[3,"MapErr","","Service for the `map_err` combinator, changing the type of a service's error.",N,N],[3,"Then","","Service for the `then` combinator, chaining a computation onto the end of another service.",N,N],[11,"clone","","",3,[[["self"]],["andthen"]]],[11,"new","","Create new `AndThen` combinator",3,[[["a"],["b"]],["andthen"]]],[11,"poll_ready","","",3,[[["self"]],["poll"]]],[11,"call","","",3,N],[11,"clone","","",4,[[["self"]],["self"]]],[11,"poll_ready","","",4,[[["self"]],["poll"]]],[11,"call","","",4,N],[11,"clone","","",5,[[["self"]],["self"]]],[11,"poll_ready","","",5,[[["self"]],["poll"]]],[11,"call","","",5,N],[11,"new","","Create new `Map` combinator",6,[[["t"],["f"]],["self"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"poll_ready","","",6,[[["self"]],["poll"]]],[11,"call","","",6,N],[11,"new","","Create new `MapErr` combinator",7,[[["t"],["f"]],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"poll_ready","","",7,[[["self"]],["poll"]]],[11,"call","","",7,N],[11,"new","","Create new `Then` combinator",8,[[["a"],["b"]],["then"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"poll_ready","","",8,[[["self"]],["poll"]]],[11,"call","","",8,N],[8,"ServiceExt","","An extension trait for `Service`s that provides a variety of convenient adapters",N,N],[11,"apply","","",9,[[["self"],["f"]],["apply"]]],[11,"and_then","","Call another service after call to this one has resolved successfully.",9,[[["self"],["b"]],["andthen"]]],[11,"from_err","","Map this service's error to any error implementing `From` for this service`s`Error`.",9,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a call to the service finished, passing the result of the call to the next service `B`.",9,[[["self"],["b"]],["then"]]],[11,"map","","Map this service's output to a different type, returning a new service of the resulting type.",9,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this service's error to a different error, returning a new service.",9,[[["self"],["f"]],["maperr"]]],[0,"option","tower_util","Contains `OptionService` and related types and functions.",N,N],[3,"OptionService","tower_util::option","Optionally forwards requests to an inner service.",N,N],[3,"ResponseFuture","","Response future returned by `OptionService`.",N,N],[4,"Error","","Error produced by `OptionService` responding to a request.",N,N],[13,"Inner","","",10,N],[13,"None","","",10,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"some","","Returns an `OptionService` that forwards requests to `inner`.",11,[[["t"]],["self"]]],[11,"none","","Returns an `OptionService` that responds to all requests with `Error::None`.",11,[[],["self"]]],[11,"poll_ready","","",11,[[["self"]],["poll"]]],[11,"call","","",11,N],[11,"poll","","",12,[[["self"]],["poll"]]],[11,"new","tower_util","Returns a new `NewServiceFn` with the given closure.",13,[[["t"]],["self"]]],[11,"new_service","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"new_service","","",13,N],[11,"from","tower_util::boxed","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","tower_util::either","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","tower_util::ext","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","tower_util::option","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into_future","","",12,[[["self"]],["f"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]]],"paths":[[3,"BoxService"],[3,"UnsyncBoxService"],[4,"EitherService"],[3,"AndThen"],[3,"Apply"],[3,"FromErr"],[3,"Map"],[3,"MapErr"],[3,"Then"],[8,"ServiceExt"],[4,"Error"],[3,"OptionService"],[3,"ResponseFuture"],[3,"NewServiceFn"]]};
searchIndex["tower_watch"]={"doc":"","items":[[3,"WatchService","tower_watch","A Service that re-binds an inner Service each time a Watch is notified.",N,N],[3,"ResponseFuture","","",N,N],[4,"Error","","",N,N],[13,"Inner","","",0,N],[13,"WatchError","","",0,N],[8,"Bind","","Binds new instances of a Service with a borrowed reference to the watched value.",N,N],[16,"Service","","",1,N],[10,"bind","","",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new WatchService, bound from the initial value of `watch`.",2,[[["watch"],["b"]],["watchservice"]]],[11,"poll_ready","","",2,[[["self"]],["poll"]]],[11,"call","","",2,N],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Error"],[8,"Bind"],[3,"WatchService"],[3,"ResponseFuture"]]};
initSearch(searchIndex);
